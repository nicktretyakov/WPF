//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ecours.Proxy
{
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContractRegistry", Namespace="http://schemas.datacontract.org/2004/07/Ecours.Domain.Entity")]
    [System.SerializableAttribute()]
    public partial class ContractRegistry : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long AffiliationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CRTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ConnectionAgreementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ContractPeoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContractRegionalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ContractTkoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DrainaGeContractField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long EaVcOrganizationTaTableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ExpirationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NumDocField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OkatoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReceptionTargetField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Act
        {
            get
            {
                return this.ActField;
            }
            set
            {
                if ((object.ReferenceEquals(this.ActField, value) != true))
                {
                    this.ActField = value;
                    this.RaisePropertyChanged("Act");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Affiliation
        {
            get
            {
                return this.AffiliationField;
            }
            set
            {
                if ((this.AffiliationField.Equals(value) != true))
                {
                    this.AffiliationField = value;
                    this.RaisePropertyChanged("Affiliation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CRType
        {
            get
            {
                return this.CRTypeField;
            }
            set
            {
                if ((object.ReferenceEquals(this.CRTypeField, value) != true))
                {
                    this.CRTypeField = value;
                    this.RaisePropertyChanged("CRType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ConnectionAgreement
        {
            get
            {
                return this.ConnectionAgreementField;
            }
            set
            {
                if ((this.ConnectionAgreementField.Equals(value) != true))
                {
                    this.ConnectionAgreementField = value;
                    this.RaisePropertyChanged("ConnectionAgreement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ContractPeo
        {
            get
            {
                return this.ContractPeoField;
            }
            set
            {
                if ((this.ContractPeoField.Equals(value) != true))
                {
                    this.ContractPeoField = value;
                    this.RaisePropertyChanged("ContractPeo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContractRegional
        {
            get
            {
                return this.ContractRegionalField;
            }
            set
            {
                if ((object.ReferenceEquals(this.ContractRegionalField, value) != true))
                {
                    this.ContractRegionalField = value;
                    this.RaisePropertyChanged("ContractRegional");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ContractTko
        {
            get
            {
                return this.ContractTkoField;
            }
            set
            {
                if ((this.ContractTkoField.Equals(value) != true))
                {
                    this.ContractTkoField = value;
                    this.RaisePropertyChanged("ContractTko");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date
        {
            get
            {
                return this.DateField;
            }
            set
            {
                if ((this.DateField.Equals(value) != true))
                {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DrainaGeContract
        {
            get
            {
                return this.DrainaGeContractField;
            }
            set
            {
                if ((object.ReferenceEquals(this.DrainaGeContractField, value) != true))
                {
                    this.DrainaGeContractField = value;
                    this.RaisePropertyChanged("DrainaGeContract");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long EaVcOrganizationTaTable
        {
            get
            {
                return this.EaVcOrganizationTaTableField;
            }
            set
            {
                if ((this.EaVcOrganizationTaTableField.Equals(value) != true))
                {
                    this.EaVcOrganizationTaTableField = value;
                    this.RaisePropertyChanged("EaVcOrganizationTaTable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ExpirationDate
        {
            get
            {
                return this.ExpirationDateField;
            }
            set
            {
                if ((this.ExpirationDateField.Equals(value) != true))
                {
                    this.ExpirationDateField = value;
                    this.RaisePropertyChanged("ExpirationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                if ((this.IdField.Equals(value) != true))
                {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                if ((object.ReferenceEquals(this.NameField, value) != true))
                {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NumDoc
        {
            get
            {
                return this.NumDocField;
            }
            set
            {
                if ((object.ReferenceEquals(this.NumDocField, value) != true))
                {
                    this.NumDocField = value;
                    this.RaisePropertyChanged("NumDoc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Okato
        {
            get
            {
                return this.OkatoField;
            }
            set
            {
                if ((object.ReferenceEquals(this.OkatoField, value) != true))
                {
                    this.OkatoField = value;
                    this.RaisePropertyChanged("Okato");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReceptionTarget
        {
            get
            {
                return this.ReceptionTargetField;
            }
            set
            {
                if ((object.ReferenceEquals(this.ReceptionTargetField, value) != true))
                {
                    this.ReceptionTargetField = value;
                    this.RaisePropertyChanged("ReceptionTarget");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Ecours.Utils.Excepting")]
    [System.SerializableAttribute()]
    public partial class FaultMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                if ((object.ReferenceEquals(this.MessageField, value) != true))
                {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Ecours.Proxy.IServiceContractor")]
    public interface IServiceContractor
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceContractor/Get", ReplyAction="http://tempuri.org/IServiceContractor/GetResponse")]
        Ecours.Proxy.ContractRegistry Get(string FieldNameId, int Value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceContractor/Get", ReplyAction="http://tempuri.org/IServiceContractor/GetResponse")]
        System.Threading.Tasks.Task<Ecours.Proxy.ContractRegistry> GetAsync(string FieldNameId, int Value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceContractor/All", ReplyAction="http://tempuri.org/IServiceContractor/AllResponse")]
        System.Collections.Generic.List<Ecours.Proxy.ContractRegistry> All();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceContractor/All", ReplyAction="http://tempuri.org/IServiceContractor/AllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Ecours.Proxy.ContractRegistry>> AllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceContractor/Insert", ReplyAction="http://tempuri.org/IServiceContractor/InsertResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ecours.Proxy.FaultMessage), Action="https://www.ecours.ru/FaultMessage", Name="FaultMessage", Namespace="http://schemas.datacontract.org/2004/07/Ecours.Utils.Excepting")]
        void Insert(Ecours.Proxy.ContractRegistry contractRegistry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceContractor/Insert", ReplyAction="http://tempuri.org/IServiceContractor/InsertResponse")]
        System.Threading.Tasks.Task InsertAsync(Ecours.Proxy.ContractRegistry contractRegistry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceContractor/Test", ReplyAction="http://tempuri.org/IServiceContractor/TestResponse")]
        bool Test();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceContractor/Test", ReplyAction="http://tempuri.org/IServiceContractor/TestResponse")]
        System.Threading.Tasks.Task<bool> TestAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceContractorChannel : Ecours.Proxy.IServiceContractor, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceContractorClient : System.ServiceModel.ClientBase<Ecours.Proxy.IServiceContractor>, Ecours.Proxy.IServiceContractor
    {
        
        public ServiceContractorClient()
        {
        }
        
        public ServiceContractorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName)
        {
        }
        
        public ServiceContractorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public ServiceContractorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public ServiceContractorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public Ecours.Proxy.ContractRegistry Get(string FieldNameId, int Value)
        {
            return base.Channel.Get(FieldNameId, Value);
        }
        
        public System.Threading.Tasks.Task<Ecours.Proxy.ContractRegistry> GetAsync(string FieldNameId, int Value)
        {
            return base.Channel.GetAsync(FieldNameId, Value);
        }
        
        public System.Collections.Generic.List<Ecours.Proxy.ContractRegistry> All()
        {
            return base.Channel.All();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Ecours.Proxy.ContractRegistry>> AllAsync()
        {
            return base.Channel.AllAsync();
        }
        
        public void Insert(Ecours.Proxy.ContractRegistry contractRegistry)
        {
            base.Channel.Insert(contractRegistry);
        }
        
        public System.Threading.Tasks.Task InsertAsync(Ecours.Proxy.ContractRegistry contractRegistry)
        {
            return base.Channel.InsertAsync(contractRegistry);
        }
        
        public bool Test()
        {
            return base.Channel.Test();
        }
        
        public System.Threading.Tasks.Task<bool> TestAsync()
        {
            return base.Channel.TestAsync();
        }
    }
}
