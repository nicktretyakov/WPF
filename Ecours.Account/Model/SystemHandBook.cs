//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ecours.Proxy
{
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OKATO", Namespace="http://schemas.datacontract.org/2004/07/Ecours.Domain.Entity")]
    [System.SerializableAttribute()]
    public partial class OKATO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Ereg_IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Okato_BeginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Okato_CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Okato_EndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Okato_IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Okato_NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Oktmo_CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Oktmo_NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Parent_Okato_IdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Date
        {
            get
            {
                return this.DateField;
            }
            set
            {
                if ((this.DateField.Equals(value) != true))
                {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ereg_Id
        {
            get
            {
                return this.Ereg_IdField;
            }
            set
            {
                if ((object.ReferenceEquals(this.Ereg_IdField, value) != true))
                {
                    this.Ereg_IdField = value;
                    this.RaisePropertyChanged("Ereg_Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                if ((this.IdField.Equals(value) != true))
                {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Okato_Begin
        {
            get
            {
                return this.Okato_BeginField;
            }
            set
            {
                if ((object.ReferenceEquals(this.Okato_BeginField, value) != true))
                {
                    this.Okato_BeginField = value;
                    this.RaisePropertyChanged("Okato_Begin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Okato_Code
        {
            get
            {
                return this.Okato_CodeField;
            }
            set
            {
                if ((object.ReferenceEquals(this.Okato_CodeField, value) != true))
                {
                    this.Okato_CodeField = value;
                    this.RaisePropertyChanged("Okato_Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Okato_End
        {
            get
            {
                return this.Okato_EndField;
            }
            set
            {
                if ((object.ReferenceEquals(this.Okato_EndField, value) != true))
                {
                    this.Okato_EndField = value;
                    this.RaisePropertyChanged("Okato_End");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Okato_Id
        {
            get
            {
                return this.Okato_IdField;
            }
            set
            {
                if ((object.ReferenceEquals(this.Okato_IdField, value) != true))
                {
                    this.Okato_IdField = value;
                    this.RaisePropertyChanged("Okato_Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Okato_Name
        {
            get
            {
                return this.Okato_NameField;
            }
            set
            {
                if ((object.ReferenceEquals(this.Okato_NameField, value) != true))
                {
                    this.Okato_NameField = value;
                    this.RaisePropertyChanged("Okato_Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Oktmo_Code
        {
            get
            {
                return this.Oktmo_CodeField;
            }
            set
            {
                if ((object.ReferenceEquals(this.Oktmo_CodeField, value) != true))
                {
                    this.Oktmo_CodeField = value;
                    this.RaisePropertyChanged("Oktmo_Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Oktmo_Name
        {
            get
            {
                return this.Oktmo_NameField;
            }
            set
            {
                if ((object.ReferenceEquals(this.Oktmo_NameField, value) != true))
                {
                    this.Oktmo_NameField = value;
                    this.RaisePropertyChanged("Oktmo_Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Parent_Okato_Id
        {
            get
            {
                return this.Parent_Okato_IdField;
            }
            set
            {
                if ((object.ReferenceEquals(this.Parent_Okato_IdField, value) != true))
                {
                    this.Parent_Okato_IdField = value;
                    this.RaisePropertyChanged("Parent_Okato_Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OKOPF", Namespace="http://schemas.datacontract.org/2004/07/Ecours.Domain.Entity")]
    [System.SerializableAttribute()]
    public partial class OKOPF : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code
        {
            get
            {
                return this.CodeField;
            }
            set
            {
                if ((object.ReferenceEquals(this.CodeField, value) != true))
                {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Count
        {
            get
            {
                return this.CountField;
            }
            set
            {
                if ((object.ReferenceEquals(this.CountField, value) != true))
                {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Date
        {
            get
            {
                return this.DateField;
            }
            set
            {
                if ((this.DateField.Equals(value) != true))
                {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                if ((this.IdField.Equals(value) != true))
                {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Level
        {
            get
            {
                return this.LevelField;
            }
            set
            {
                if ((object.ReferenceEquals(this.LevelField, value) != true))
                {
                    this.LevelField = value;
                    this.RaisePropertyChanged("Level");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                if ((object.ReferenceEquals(this.NameField, value) != true))
                {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Ecours.Proxy.ISystemHandbook")]
    public interface ISystemHandbook
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISystemHandbook/GetOkatoById", ReplyAction="http://tempuri.org/ISystemHandbook/GetOkatoByIdResponse")]
        Ecours.Proxy.OKATO GetOkatoById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISystemHandbook/GetOkatoById", ReplyAction="http://tempuri.org/ISystemHandbook/GetOkatoByIdResponse")]
        System.Threading.Tasks.Task<Ecours.Proxy.OKATO> GetOkatoByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISystemHandbook/GetOkato", ReplyAction="http://tempuri.org/ISystemHandbook/GetOkatoResponse")]
        System.Collections.Generic.List<Ecours.Proxy.OKATO> GetOkato(long fetch, long offset, string orderBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISystemHandbook/GetOkato", ReplyAction="http://tempuri.org/ISystemHandbook/GetOkatoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Ecours.Proxy.OKATO>> GetOkatoAsync(long fetch, long offset, string orderBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISystemHandbook/NewOkato", ReplyAction="http://tempuri.org/ISystemHandbook/NewOkatoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Ecours.Proxy.FaultMessage), Action = "https://www.ecours.ru/FaultMessage", Name = "FaultMessage", Namespace = "http://schemas.datacontract.org/2004/07/Ecours.Utils.Excepting")]
        bool NewOkato(Ecours.Proxy.OKATO okato);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISystemHandbook/NewOkato", ReplyAction="http://tempuri.org/ISystemHandbook/NewOkatoResponse")]
        System.Threading.Tasks.Task<bool> NewOkatoAsync(Ecours.Proxy.OKATO okato);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISystemHandbook/GetOkopfById", ReplyAction="http://tempuri.org/ISystemHandbook/GetOkopfByIdResponse")]
        Ecours.Proxy.OKOPF GetOkopfById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISystemHandbook/GetOkopfById", ReplyAction="http://tempuri.org/ISystemHandbook/GetOkopfByIdResponse")]
        System.Threading.Tasks.Task<Ecours.Proxy.OKOPF> GetOkopfByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISystemHandbook/GetOkopf", ReplyAction="http://tempuri.org/ISystemHandbook/GetOkopfResponse")]
        System.Collections.Generic.List<Ecours.Proxy.OKOPF> GetOkopf(long fetch, long offset, string orderBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISystemHandbook/GetOkopf", ReplyAction="http://tempuri.org/ISystemHandbook/GetOkopfResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Ecours.Proxy.OKOPF>> GetOkopfAsync(long fetch, long offset, string orderBy);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISystemHandbookChannel : Ecours.Proxy.ISystemHandbook, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SystemHandbookClient : System.ServiceModel.ClientBase<Ecours.Proxy.ISystemHandbook>, Ecours.Proxy.ISystemHandbook
    {
        
        public SystemHandbookClient()
        {
        }
        
        public SystemHandbookClient(string endpointConfigurationName) : 
                base(endpointConfigurationName)
        {
        }
        
        public SystemHandbookClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public SystemHandbookClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public SystemHandbookClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public Ecours.Proxy.OKATO GetOkatoById(int id)
        {
            return base.Channel.GetOkatoById(id);
        }
        
        public System.Threading.Tasks.Task<Ecours.Proxy.OKATO> GetOkatoByIdAsync(int id)
        {
            return base.Channel.GetOkatoByIdAsync(id);
        }
        
        public System.Collections.Generic.List<Ecours.Proxy.OKATO> GetOkato(long fetch, long offset, string orderBy)
        {
            return base.Channel.GetOkato(fetch, offset, orderBy);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Ecours.Proxy.OKATO>> GetOkatoAsync(long fetch, long offset, string orderBy)
        {
            return base.Channel.GetOkatoAsync(fetch, offset, orderBy);
        }
        
        public bool NewOkato(Ecours.Proxy.OKATO okato)
        {
            return base.Channel.NewOkato(okato);
        }
        
        public System.Threading.Tasks.Task<bool> NewOkatoAsync(Ecours.Proxy.OKATO okato)
        {
            return base.Channel.NewOkatoAsync(okato);
        }
        
        public Ecours.Proxy.OKOPF GetOkopfById(int id)
        {
            return base.Channel.GetOkopfById(id);
        }
        
        public System.Threading.Tasks.Task<Ecours.Proxy.OKOPF> GetOkopfByIdAsync(int id)
        {
            return base.Channel.GetOkopfByIdAsync(id);
        }
        
        public System.Collections.Generic.List<Ecours.Proxy.OKOPF> GetOkopf(long fetch, long offset, string orderBy)
        {
            return base.Channel.GetOkopf(fetch, offset, orderBy);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Ecours.Proxy.OKOPF>> GetOkopfAsync(long fetch, long offset, string orderBy)
        {
            return base.Channel.GetOkopfAsync(fetch, offset, orderBy);
        }
    }
}
