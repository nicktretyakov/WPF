//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ecours.Contractor.ServiceContractor {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Contractor", Namespace="http://schemas.datacontract.org/2004/07/Ecours.Domain.Entity")]
    [System.SerializableAttribute()]
    public partial class Contractor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EmployeeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmployeeID {
            get {
                return this.EmployeeIDField;
            }
            set {
                if ((this.EmployeeIDField.Equals(value) != true)) {
                    this.EmployeeIDField = value;
                    this.RaisePropertyChanged("EmployeeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceContractor.IServiceContractor")]
    public interface IServiceContractor {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceContractor/Get", ReplyAction="http://tempuri.org/IServiceContractor/GetResponse")]
        Ecours.Contractor.ServiceContractor.Contractor Get(string FieldNameId, int Value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceContractor/Get", ReplyAction="http://tempuri.org/IServiceContractor/GetResponse")]
        System.Threading.Tasks.Task<Ecours.Contractor.ServiceContractor.Contractor> GetAsync(string FieldNameId, int Value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceContractor/All", ReplyAction="http://tempuri.org/IServiceContractor/AllResponse")]
        System.Collections.Generic.List<Ecours.Contractor.ServiceContractor.Contractor> All();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceContractor/All", ReplyAction="http://tempuri.org/IServiceContractor/AllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Ecours.Contractor.ServiceContractor.Contractor>> AllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceContractor/Insert", ReplyAction="http://tempuri.org/IServiceContractor/InsertResponse")]
        void Insert(Ecours.Contractor.ServiceContractor.Contractor contractor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceContractor/Insert", ReplyAction="http://tempuri.org/IServiceContractor/InsertResponse")]
        System.Threading.Tasks.Task InsertAsync(Ecours.Contractor.ServiceContractor.Contractor contractor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceContractor/Test", ReplyAction="http://tempuri.org/IServiceContractor/TestResponse")]
        bool Test();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceContractor/Test", ReplyAction="http://tempuri.org/IServiceContractor/TestResponse")]
        System.Threading.Tasks.Task<bool> TestAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceContractorChannel : Ecours.Contractor.ServiceContractor.IServiceContractor, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceContractorClient : System.ServiceModel.ClientBase<Ecours.Contractor.ServiceContractor.IServiceContractor>, Ecours.Contractor.ServiceContractor.IServiceContractor {
        
        public ServiceContractorClient() {
        }
        
        public ServiceContractorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceContractorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceContractorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceContractorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Ecours.Contractor.ServiceContractor.Contractor Get(string FieldNameId, int Value) {
            return base.Channel.Get(FieldNameId, Value);
        }
        
        public System.Threading.Tasks.Task<Ecours.Contractor.ServiceContractor.Contractor> GetAsync(string FieldNameId, int Value) {
            return base.Channel.GetAsync(FieldNameId, Value);
        }
        
        public System.Collections.Generic.List<Ecours.Contractor.ServiceContractor.Contractor> All() {
            return base.Channel.All();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Ecours.Contractor.ServiceContractor.Contractor>> AllAsync() {
            return base.Channel.AllAsync();
        }
        
        public void Insert(Ecours.Contractor.ServiceContractor.Contractor contractor) {
            base.Channel.Insert(contractor);
        }
        
        public System.Threading.Tasks.Task InsertAsync(Ecours.Contractor.ServiceContractor.Contractor contractor) {
            return base.Channel.InsertAsync(contractor);
        }
        
        public bool Test() {
            return base.Channel.Test();
        }
        
        public System.Threading.Tasks.Task<bool> TestAsync() {
            return base.Channel.TestAsync();
        }
    }
}
